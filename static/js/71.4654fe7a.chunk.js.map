{"version":3,"file":"static/js/71.4654fe7a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ElementItem/ElementItem.jsx","components/ElementsList/ElementsList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFiltersStatus = state => state.filters.status;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFiltersStatus],\n  (contacts, filterStatus) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterStatus)\n    );\n  }\n);\n","import { addContact } from '../../redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const newContact = event => {\n    event.preventDefault();\n    const name = event.currentTarget['name'].value;\n    const number = event.currentTarget['number'].value;\n\n    if (contacts.some(check => check.name === name)) {\n      alert(`${name} is already in contacts.`);\n    } else if (contacts.some(check => check.number === number)) {\n      alert(`This number ${number} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    event.currentTarget.reset();\n\n    return;\n  };\n\n  return (\n    <>\n      <form onSubmit={newContact}>\n        <p>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <br />\n        <p>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <br />\n        <br />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { setFilterStatus } from '../../redux/contacts/filtersSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filtered = newFilterStatus => {\n    const filterValue = newFilterStatus.target.value;\n    dispatch(setFilterStatus(filterValue));\n  };\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input type=\"text\" onChange={filtered} />\n      <br />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/operations';\n\nconst ElementItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const delateContact = () => dispatch(removeContact(contact.id));\n\n  return (\n    <li>\n      {contact.name} {contact.number}{' '}\n      <button type=\"button\" onClick={delateContact}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ElementItem;\n","import ElementItem from '../ElementItem/ElementItem';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nconst ElementsList = () => {\n  const filter = useSelector(selectFilteredContacts);\n\n  const list = filter.map(contact => (\n    <ElementItem key={contact.id} contact={contact} />\n  ));\n  return (\n    <>\n      <ul>{list}</ul>\n    </>\n  );\n};\n\nexport default ElementsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from '../../redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { Helmet } from 'react-helmet-async';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ElementsList from '../../components/ElementsList/ElementsList';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contact</h2>\n      <Filter />\n      {isLoading && error && <b>Loading...</b>}\n      <ElementsList />\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filters","status","filterStatus","filter","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","_jsx","_Fragment","children","_jsxs","onSubmit","event","preventDefault","currentTarget","value","number","some","check","alert","concat","addContact","reset","type","pattern","title","required","onChange","newFilterStatus","filterValue","target","setFilterStatus","_ref","onClick","removeContact","id","list","map","ElementItem","useEffect","fetchContacts","Helmet","ContactForm","Filter","ElementsList"],"sourceRoot":""}