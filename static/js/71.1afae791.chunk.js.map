{"version":3,"file":"static/js/71.1afae791.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ElementItem/ElementItem.jsx","components/ElementsList/ElementsList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFiltersStatus = state => state.filters.status;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFiltersStatus],\n  (contacts, filterStatus) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterStatus)\n    );\n  }\n);\n","import { useState } from 'react';\nimport { addContact } from '../../redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { Button, TextField, Box, FormControl } from '@mui/material';\nimport PersonAddAlt1Icon from '@mui/icons-material/PersonAddAlt1';\nimport LocalPhoneIcon from '@mui/icons-material/LocalPhone';\nimport PersonIcon from '@mui/icons-material/Person';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [userError, setUserError] = useState(false);\n  const [numberError, setNumberError] = useState(false);\n\n  const handleUserError = event => {\n    const name = event.target.value;\n    const pattern = new RegExp(\n      '^[a-zA-Zа-яА-Я]+(([a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$'\n    );\n    if (!pattern.test(name)) {\n      setUserError(true);\n    } else {\n      setUserError(false);\n    }\n  };\n\n  const handleNumberError = event => {\n    const number = event.target.value;\n    const pattern = new RegExp(\n      '\\\\+?\\\\d{1,4}?[-.\\\\s]?(\\\\d{1,3}?)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}'\n    );\n    if (!pattern.test(number)) {\n      setNumberError(true);\n    } else {\n      setNumberError(false);\n    }\n  };\n\n  const newContact = event => {\n    event.preventDefault();\n    const name = event.currentTarget['name'].value;\n    const number = event.currentTarget['number'].value;\n\n    if (contacts.some(check => check.name === name)) {\n      alert(`${name} is already in contacts.`);\n    } else if (contacts.some(check => check.number === number)) {\n      alert(`This number ${number} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    event.currentTarget.reset();\n\n    return;\n  };\n\n  return (\n    <>\n      <form onSubmit={newContact}>\n        <FormControl sx={{ display: 'flex', gap: '20px' }}>\n          <Box sx={{ display: 'flex', alignItems: 'flex-end', gap: '15px' }}>\n            <PersonIcon fontSize=\"large\" />\n            <TextField\n              onChange={handleUserError}\n              noValidate\n              autoComplete=\"off\"\n              label=\"Name\"\n              variant=\"standard\"\n              error={userError}\n              type=\"text\"\n              name=\"name\"\n              required\n            />\n          </Box>\n          <Box sx={{ display: 'flex', alignItems: 'flex-end', gap: '15px' }}>\n            <LocalPhoneIcon fontSize=\"large\" />\n            <TextField\n              onChange={handleNumberError}\n              noValidate\n              autoComplete=\"off\"\n              label=\"Number\"\n              variant=\"standard\"\n              type=\"tel\"\n              error={numberError}\n              name=\"number\"\n              required\n            />\n          </Box>\n          <Box\n            sx={{ display: 'flex', justifyContent: 'right', margin: '20px 0' }}\n          >\n            <Button\n              sx={{\n                maxWidth: '165px',\n                float: 'left',\n              }}\n              variant=\"contained\"\n              endIcon={<PersonAddAlt1Icon />}\n              type=\"submit\"\n            >\n              Add contact\n            </Button>\n          </Box>\n        </FormControl>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { setFilterStatus } from '../../redux/contacts/filtersSlice';\nimport { Box, TextField, Typography } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filtered = newFilterStatus => {\n    const filterValue = newFilterStatus.target.value;\n    dispatch(setFilterStatus(filterValue));\n  };\n\n  return (\n    <Box sx={{}}>\n      <Typography>Find contacts by name</Typography>\n      <TextField\n        size=\"small\"\n        variant=\"outlined\"\n        type=\"text\"\n        InputProps={{\n          endAdornment: <SearchIcon position=\"end\" />,\n        }}\n        onChange={filtered}\n      />\n      <br />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/operations';\nimport { Button } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { ListItem, ListItemText, ListItemButton } from '@mui/material';\n\nconst ElementItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const delateContact = () => dispatch(removeContact(contact.id));\n\n  return (\n    <ListItem sx={{ maxWidth: '300px' }} disablePadding>\n      <ListItemButton>\n        <ListItemText primary={contact.name} secondary={contact.number} />\n        <Button\n          variant=\"outlined\"\n          color=\"error\"\n          size=\"small\"\n          startIcon={<DeleteIcon />}\n          onClick={delateContact}\n        >\n          Delete\n        </Button>\n      </ListItemButton>\n    </ListItem>\n  );\n};\n\nexport default ElementItem;\n","import ElementItem from '../ElementItem/ElementItem';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { List } from '@mui/material';\n\nconst ElementsList = () => {\n  const filter = useSelector(selectFilteredContacts);\n\n  const list = filter.map(contact => (\n    <ElementItem key={contact.id} contact={contact} />\n  ));\n  return (\n    <>\n      <List>{list}</List>\n    </>\n  );\n};\n\nexport default ElementsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from '../../redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { Helmet } from 'react-helmet-async';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ElementsList from '../../components/ElementsList/ElementsList';\nimport { Typography, Box } from '@mui/material';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <Box sx={{ display: 'flex', flexDirection: 'column', minWidth: '300px' }}>\n        <Typography variant=\"h4\">Phonebook</Typography>\n        <ContactForm />\n        <Typography variant=\"h4\">Contact</Typography>\n        <Filter />\n        {isLoading && error && <b>Loading...</b>}\n        <ElementsList />\n      </Box>\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filters","status","filterStatus","filter","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","userError","setUserError","_useState3","_useState4","numberError","setNumberError","_jsx","_Fragment","children","onSubmit","event","preventDefault","currentTarget","value","number","some","check","alert","concat","addContact","reset","_jsxs","FormControl","sx","display","gap","Box","alignItems","PersonIcon","fontSize","TextField","onChange","target","RegExp","test","noValidate","autoComplete","label","variant","type","required","LocalPhoneIcon","justifyContent","margin","Button","maxWidth","float","endIcon","PersonAddAlt1Icon","Typography","size","InputProps","endAdornment","SearchIcon","position","newFilterStatus","filterValue","setFilterStatus","_ref","ListItem","disablePadding","ListItemButton","ListItemText","primary","secondary","color","startIcon","DeleteIcon","onClick","removeContact","id","list","map","ElementItem","List","useEffect","fetchContacts","Helmet","flexDirection","minWidth","ContactForm","Filter","ElementsList"],"sourceRoot":""}